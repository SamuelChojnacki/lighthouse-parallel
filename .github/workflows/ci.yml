name: Lighthouse Parallel POC CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-parallel-lighthouse:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: docker compose up -d

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready..."
          timeout 60 sh -c 'until curl -f -H "X-API-Key: wKuU92vSNq67J16/GF55q1s5SYgztBy5vqQ9lILuM+I=" http://localhost:3000/lighthouse/stats; do sleep 2; done'
          echo "API is ready!"

      - name: Check services health
        run: |
          docker compose ps
          docker compose logs api

      - name: Install test dependencies
        run: |
          docker compose exec -T api npm install

      - name: Run E2E tests
        run: |
          echo "Running E2E tests for 10 parallel Lighthouse audits..."
          docker compose exec -T api npm run test:e2e
        env:
          CI: true

      - name: Get API logs
        if: always()
        run: docker compose logs api

      - name: Get Redis logs
        if: always()
        run: docker compose logs redis

      - name: Cleanup
        if: always()
        run: docker compose down -v

  performance-benchmark:
    runs-on: ubuntu-latest
    needs: test-parallel-lighthouse
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: docker compose up -d

      - name: Wait for API
        run: |
          timeout 60 sh -c 'until curl -f http://localhost:3000/lighthouse/stats; do sleep 2; done'

      - name: Run performance benchmark
        run: |
          echo "Starting 10 parallel audits benchmark..."
          START_TIME=$(date +%s)

          # Launch batch audit
          RESPONSE=$(curl -X POST http://localhost:3000/lighthouse/batch \
            -H "Content-Type: application/json" \
            -d '{
              "urls": [
                "https://example.com",
                "https://www.google.com",
                "https://github.com",
                "https://stackoverflow.com",
                "https://www.npmjs.com",
                "https://nestjs.com",
                "https://en.wikipedia.org",
                "https://www.reddit.com",
                "https://twitter.com",
                "https://www.linkedin.com"
              ]
            }')

          BATCH_ID=$(echo $RESPONSE | jq -r '.batchId')
          echo "Batch ID: $BATCH_ID"

          # Poll for completion
          while true; do
            STATUS=$(curl -s http://localhost:3000/lighthouse/batch/$BATCH_ID)
            COMPLETED=$(echo $STATUS | jq -r '.completed')
            FAILED=$(echo $STATUS | jq -r '.failed')
            TOTAL=$(echo $STATUS | jq -r '.total')

            echo "Progress: $COMPLETED completed, $FAILED failed out of $TOTAL"

            if [ $((COMPLETED + FAILED)) -eq $TOTAL ]; then
              break
            fi

            sleep 5
          done

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "✅ Benchmark completed in ${DURATION}s"
          echo "Duration: $DURATION" > benchmark-result.txt

          # Verify parallel execution (should be < 180s)
          if [ $DURATION -lt 180 ]; then
            echo "✅ SUCCESS: Parallel execution confirmed (${DURATION}s < 180s)"
          else
            echo "❌ WARNING: Execution took longer than expected: ${DURATION}s"
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: benchmark-result.txt

      - name: Cleanup
        if: always()
        run: docker compose down -v

  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check build output
        run: |
          ls -la dist/
          echo "✅ Build successful"